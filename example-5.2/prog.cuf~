
program prog
  
  use dev_lib
  use cudafor
  use, intrinsic :: iso_c_binding
  
  implicit none
  
  integer, parameter :: slice = 10, n = 100, sz = n * n
  
  type(c_ptr) :: a       ! C-type pointer on host
  type(c_devptr) :: a_d  ! C-type pointer on device
  real, dimension(:,:), pointer :: fa               ! host pointer
  real, dimension(:,:), allocatable, device, target :: fa_d ! device pointer
  type(dim3) :: blocks, threads
  
  integer :: istat, i, j
  logical, allocatable, dimension(:,:) :: match
  
  ! tell the host & device to use mapped memory
  istat = cudaSetDeviceFlags(cudaDeviceMapHost) 
  if (istat /= cudaSuccess) stop 'cudaSetDeviceFlags(cudaDeviceMapHost) failed'
  
  ! allocate pinned memory on the host for the pointer
  istat = cudaHostAlloc(a, sz * sizeof(1.0), cudaHostAllocMapped)
  if (istat /= cudaSuccess) stop 'cudaHostAlloc(..., cudaHostAllocMapped) failed'
  
  ! now, move the c_ptr pointer to the fortran host pointer
  call c_f_pointer(a, fa, (/ n, n /))
  
  ! update the data of the host pointer with some nonsence data
  fa = 0.0
  
  ! get a device array to the same host pointer array
  istat = cudaHostGetDevicePointer(a_d, a, 0)
  if (istat /= cudaSuccess) stop 'cudaHostGetDevicePointer() failed' 
 
  ! copy the c_devptr device pointer to a device fortran array
  call c_f_pointer(a_d, fa_d, (/ n, n /))
  
  ! manually forcing the host pointer to point at the device target array
  fa => fa_d 

  ! specify the kernel launching specs
  blocks = dim3(n, n, 1)
  threads = dim3(n, n, 1)
  
  ! launch the kernel, and store the result in the fortran device pointer
  call increment_matrix <<<blocks, threads>>>(fa_d, n, slice)
  
  ! sync the device and host immediately
  istat = cudaDeviceSynchronize()
  
  ! can you modify the pointer value on the device?
  allocate(match(n,n))
  match(:,:) = .true.
  do j = 1, n
      do i = 1, n
          if (fa(i, j) /= real(i) + n * j + 1.0) then 
             match(i,j) = .false. 
             ! write(*,'(a,i3,a,i3,a,f8.2)') 'fa(',i,',',j,') = ', fa(i,j)
          endif
      enddo
  enddo
  print*, 'Do all elements of fa(:,:) have the expected value?', any(match)

  ! deallocate the host pointer
  istat = cudaFreeHost(a)
  
end program prog
