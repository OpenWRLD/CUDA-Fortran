
module kern_averages

  implicit none

  integer, parameter :: n = 2048
  real, dimension(:,:), pointer, texture :: tex
 
  contains 

  attributes(global) subroutine avr_global_4(a, avr)
    real :: a(0:n+1, 0:n+1), avr(n, n)
!    real :: a(:,:), avr(:,:)
    integer :: i, j

    i = blockDim%x * (blockIdx%x - 1) + threadIdx%x
    j = blockDim%y * (blockIdx%y - 1) + threadIdx%y

    avr(i, j) = (a(i-1,j) + a(i+1,j) + a(i,j-1) + a(i,j+1)) / 4.0

  end subroutine avr_global_4

  attributes(global) subroutine avr_global_8(a, avr)
    real :: a(0:n+1, 0:n+1), avr(n, n)
    integer :: i, j

    i = blockDim%x * (blockIdx%x - 1) + threadIdx%x
    j = blockDim%y * (blockIdx%y - 1) + threadIdx%y

    avr(i, j) = (a(i-1,j) + a(i+1,j) + a(i,j-1) + a(i,j+1) + &
                 a(i-1,j-1) + a(i-1,j+1) + a(i+1,j-1) + a(i+1,j+1)) / 8.0

  end subroutine avr_global_8

  attributes(global) subroutine avr_tex_4(avr)
    real :: avr(n, n)
    integer :: i, j

    i = blockDim%x * (blockIdx%x - 1) + threadIdx%x
    j = blockDim%y * (blockIdx%y - 1) + threadIdx%y

    avr(i, j) = (tex(i-1,j) + tex(i+1,j) + tex(i,j-1) + tex(i,j+1)) / 4.0

  end subroutine avr_tex_4

  attributes(global) subroutine avr_tex_8(avr)
    real :: avr(n, n)
    integer :: i, j

    i = blockDim%x * (blockIdx%x - 1) + threadIdx%x
    j = blockDim%y * (blockIdx%y - 1) + threadIdx%y

    avr(i, j) = (tex(i-1,j) + tex(i+1,j) + tex(i,j-1) + tex(i,j+1) + &
                 tex(i-1,j-1) + tex(i-1,j+1) + tex(i+1,j-1) + tex(i+1,j+1)) / 8.0

  end subroutine avr_tex_8

  attributes(global) subroutine init_1d(x0, x1, x)
    real, intent(in), value :: x0, x1
    real, intent(inout) :: x(0:n+1)

    integer :: i

    i = blockDim%x * (blockIdx%x - 1) + threadIdx%x - 1 ! note the last "-1" 
    if (i <= n+1) x(i) = i * (x1-x0) / (n+1) + x0

  end subroutine init_1d

  attributes(global) subroutine init_2d(x, y, u)
    real :: x(0:n+1), y(0:n+1)
    real :: u(0:n+1, 0:n+1)

    integer :: i, j, nx, ny
 
    i  = blockDim%x * (blockIdx%x - 1) + threadIdx%x - 1 ! note the last "-1"
    j  = blockDim%y * (blockIdx%y - 1) + threadIdx%y - 1 ! note the last "-1"
    nx = size(x)
    ny = size(y)
!    if (nx /= size(u, dim=1) .or. ny /= size(u, dim=2)) &
!       stop 'Error: array dimensions of u does not match with x and/or y'

    if (i <= n+1) &
       u(i, j) = exp(-sin(x(i))) * cos(y(j))**2.0

  end subroutine init_2d

end module kern_averages
